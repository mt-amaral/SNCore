@page "/chartBar"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<!-- Container do gráfico e input para controle do eixo Y -->
<div id="barchart-bar" @ref="chartContainer" style="width: 100%; height: 400px"></div>
<input type="number" @bind="YMax" @bind:event="oninput" min="1" class="form-control mb-3" />

@code {
    private ElementReference chartContainer; // Referência ao elemento HTML do gráfico
    private IJSObjectReference? module;      // Módulo JavaScript importado
    private IJSObjectReference? chartInstance; // Instância do gráfico D3
    private DotNetObjectReference<ChartBar>? dotNetRef; // Referência .NET para callbacks JS
    private int yMax = 100; // Valor máximo do eixo Y

    // Método invocado pelo JavaScript quando o eixo Y é alterado
    [JSInvokable("OnYMaxChanged")]
    public async Task HandleYMaxChanged(int newValue)
    {
        YMax = newValue; // Atualiza o valor máximo
        await InvokeAsync(StateHasChanged); // Força atualização da UI
    }

    // Ciclo de vida: Após renderização
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Primeira renderização
        {
            // Importa o módulo JavaScript
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Chart/ChartBar.razor.js");
            
            // Cria referência .NET para interoperabilidade
            dotNetRef = DotNetObjectReference.Create(this);
            
            // Inicializa o gráfico
            chartInstance = await module.InvokeAsync<IJSObjectReference>("initializeChart", chartContainer, dotNetRef, YMax);
        }
        else // Renderizações subsequentes
        {
            await UpdateYMax(); // Atualiza o eixo Y
        }
    }

    // Atualiza o valor máximo do eixo Y no gráfico
    private async Task UpdateYMax()
    {
        if (module != null && chartInstance != null)
        {
            await module.InvokeVoidAsync("updateYMax", chartInstance, YMax);
        }
    }

    // Propriedade para controle bidirecional do valor YMax
    public int YMax
    {
        get => yMax;
        set
        {
            if (yMax != value) // Só atualiza se houver mudança
            {
                yMax = value;
                StateHasChanged(); // Notifica mudança de estado
            }
        }
    }

    // Destruição: Limpeza de recursos
    public async ValueTask DisposeAsync()
    {
        if (module != null)
        {
            if (chartInstance != null)
            {
                await module.InvokeVoidAsync("disposeChart", chartInstance); // Destrói instância
                await chartInstance.DisposeAsync(); // Libera recursos JS
            }
            await module.DisposeAsync(); // Libera módulo
        }
        dotNetRef?.Dispose(); // Libera referência .NET
    }
}