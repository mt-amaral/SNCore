@page "/chartBar"
@inject IJSRuntime JSRuntime
@using System.Runtime.InteropServices.JavaScript
@implements IAsyncDisposable

<!-- Container do gráfico e input para controle do eixo Y -->
<div id="barchart-bar" @ref="ChartContainer" style="width: 100%; height: 400px"></div>


@code {
    private ElementReference ChartContainer; // Referência ao elemento HTML do gráfico
    private IJSObjectReference? Module;      // Módulo JavaScript importado
    private IJSObjectReference? ChartInstance; // Instância do gráfico D3
    private DotNetObjectReference<ChartBar>? DotNetRef; // Referência .NET para callbacks JS
    [Parameter] public List<DateTime?> Datas { get; set; } = new();
    [Parameter] 
    public int yMax { get; set; } // Valor máximo do eixo Y

    // Método invocado pelo JavaScript quando o eixo Y é alterado
    [JSInvokable("OnYMaxChanged")]
    public async Task HandleYMaxChanged(int newValue)
    {
        YMax = newValue; // Atualiza o valor máximo
        await InvokeAsync(StateHasChanged); // Força atualização da UI
    }
    
    [JSInvokable("OnYMaxChanged33")]
    public async Task HandleYMaxChangeda(List<DateTime?> newValue)
    {
        Datas = newValue; // Atualiza o valor máximo
        await InvokeAsync(StateHasChanged); // Força atualização da UI
    }

    // Ciclo de vida: Após renderização
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Primeira renderização
        {
            // Importa o módulo JavaScript
            Module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Chart/ChartBar.razor.js");
            
            // Cria referência .NET para interoperabilidade
            DotNetRef = DotNetObjectReference.Create(this);
            
            // Inicializa o gráfico
            ChartInstance = await Module.InvokeAsync<IJSObjectReference>("initializeChart", ChartContainer, DotNetRef, YMax, System.Text.Json.JsonSerializer.Serialize(Datas));
        }
        else
        {
            await UpdateYMax();
            await updateDate();
        }
        
    }

    // Atualiza o valor máximo do eixo Y no gráfico
    public async Task UpdateYMax()
    {
        await Module.InvokeVoidAsync("updateYMax", ChartInstance, YMax);
    }

    public async Task updateDate()
    {
        await Module.InvokeVoidAsync("updateDate", ChartInstance, System.Text.Json.JsonSerializer.Serialize(Datas));
    }

    // Propriedade para controle bidirecional do valor YMax
    public int YMax
    {
        get => yMax;
        set
        {
            if (yMax != value) // Só atualiza se houver mudança
            {
                yMax = value;
                StateHasChanged(); // Notifica mudança de estado
            }
        }
    }

    // Destruição: Limpeza de recursos
    public async ValueTask DisposeAsync()
    {
        if (Module != null)
        {
            if (ChartInstance != null)
            {
                await Module.InvokeVoidAsync("disposeChart", ChartInstance); // Destrói instância
                await ChartInstance.DisposeAsync(); // Libera recursos JS
            }
            await Module.DisposeAsync(); // Libera módulo
        }
        DotNetRef?.Dispose(); // Libera referência .NET
    }
}