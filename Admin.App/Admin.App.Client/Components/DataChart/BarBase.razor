@using System.Diagnostics.CodeAnalysis

@namespace Admin.App.Client.Components.DataChart

<Chart ChartType="ChartType.Bar"
       OnInitAsync="() => OnInit(false)" OnClickDataAsync="OnClickDataAsync"
       OnAfterInitAsync="@OnAfterInit" OnAfterUpdateAsync="@OnAfterUpdate" @ref="BarChart" />
<div class="text-center mt-2 chart">
    <div class="btn-group">
        <button class="btn btn-primary" @onclick="e => Utility.RandomData(BarChart)"><i class="fa-solid fa-chart-column"></i><span>random data</span></button>
        <button class="btn btn-primary" @onclick="OnReloadChart"><i class="fa-solid fa-chart-column"></i><span>Reload</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.AddDataSet(BarChart, ref _barDatasetCount)"><i class="fa-solid fa-circle-plus"></i><span>Add dataset</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.RemoveDataSet(BarChart, ref _barDatasetCount)"><i class="fa-solid fa-circle-minus"></i><span>Remove dataset</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.AddData(BarChart, ref _barDataCount)"><i class="fa-solid fa-plus"></i><span>Adding data</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.RemoveData(BarChart, ref _barDataCount)"><i class="fa-solid fa-minus"></i><span>Remove data</span></button>
    </div>
</div>

@code {
    
    private int _barDatasetCount = 2;
    private int _barDataCount = 7;

    private int BarDatasetCount { get; set; } = 2;

    private int BarDataCount { get; set; } = 7;

    [NotNull]
    private Chart? BarChart { get; set; }

    [NotNull]
    private ConsoleLogger? Logger { get; set; }
    
    
    private Task<ChartDataSource> OnInit(bool stacked, bool setTitle = true)
    {
        var ds = new ChartDataSource();
        if (setTitle)
        {
            ds.Options.Title = "Bar Histogram";
        }

        ds.Options.X.Title = "days";
        ds.Options.Y.Title = "Numerical value";
        ds.Options.X.Stacked = stacked;
        ds.Options.Y.Stacked = stacked;
        ds.Labels = Enumerable.Range(1, _barDataCount).Select(i => i.ToString());
        for (var index = 0; index < _barDatasetCount; index++)
        {
            ds.Data.Add(new ChartDataset() { Label = $"Set {index}", Data = Enumerable.Range(1, _barDataCount).Select(i => Random.Shared.Next(20, 37)).Cast<object>() });
        }

        return Task.FromResult(ds);
    }
    
    private Task OnReloadChart()
    {
        BarDataCount = Random.Shared.Next(5, 15);
        BarChart.Reload();
        return Task.CompletedTask;
    }
    
    
    private Task OnAfterUpdate(ChartAction action) => InvokeAsync(() => Logger.Log($"Bar Figure update data operation completed -- {action}"));
    
    private Task OnAfterInit()
    {
        Logger.Log("Bar initialization is complete");
        return Task.CompletedTask;
    }
    private Task OnClickDataAsync((int DatasetIndex, int Index) v)
    {
        Logger.Log($"Click: DatasetIndex={v.DatasetIndex} Index={v.Index}");
        return Task.CompletedTask;
    }
    
    
}