@namespace Admin.App.Client.Components.DataChart

<Chart @ref="_lineChart" OnInitAsync="() => OnInit(0.4f, false)" OnAfterInitAsync="@OnAfterInit" OnAfterUpdateAsync="@OnAfterUpdate" />
<div class="text-center mt-2 chart">
    <div class="btn-group">
        <button class="btn btn-primary" @onclick="e => Utility.RandomData(_lineChart)"><i class="fa-solid fa-chart-line"></i><span>Random data</span></button>
        <button class="btn btn-primary" @onclick="OnReloadChart"><i class="fa-solid fa-chart-column"></i><span>Reload</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.AddDataSet(_lineChart, ref _lineDatasetCount)"><i class="fa-solid fa-circle-plus"></i><span>Add dataset</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.RemoveDataSet(_lineChart, ref _lineDatasetCount)"><i class="fa-solid fa-circle-minus"></i><span>Remove dataset</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.AddData(_lineChart, ref _lineDataCount)"><i class="fa-solid fa-plus"></i><span>Adding data</span></button>
        <button class="btn btn-primary" @onclick="e => Utility.RemoveData(_lineChart, ref _lineDataCount)"><i class="fa-solid fa-minus"></i><span>Remove data</span></button>
    </div>
</div>


@code{
private readonly Random _randomer = new();
private ConsoleLogger _logger = default!;
private int _lineDatasetCount = 3;
private int _lineDataCount = 7;
private Chart _lineChart = default!;

private readonly ChartPointStyle[] chartPointStyles =
[
ChartPointStyle.Circle,
ChartPointStyle.Cross,
ChartPointStyle.CrossRot,
ChartPointStyle.Dash,
ChartPointStyle.Line,
ChartPointStyle.Rect,
ChartPointStyle.RectRounded,
ChartPointStyle.RectRot,
ChartPointStyle.Star,
ChartPointStyle.Triangle,
];

private Task OnAfterUpdate(ChartAction action)
{
_logger.Log($"Line Figure update data operation completed -- {action}");
return Task.CompletedTask;
}

private Task OnAfterInit()
{
_logger.Log("Line initialization is complete");
return Task.CompletedTask;
}

private Task OnReloadChart()
{
    _lineDataCount = _randomer.Next(5, 15);
    _lineChart.Reload();
    return Task.CompletedTask;
}
private async Task<ChartDataSource> OnInit(float tension, bool hasNull)
{
var ds = new ChartDataSource();
ds.Options.Title = "Line Chart";
ds.Options.LegendLabelsFontSize = 16;
ds.Options.X.Title = "days";
ds.Options.Y.Title = "Numerical value";
ds.Options.XScalesBorderColor = "red";
ds.Options.YScalesBorderColor = "red";

ds.Options.XScalesGridColor = "blue";
ds.Options.XScalesGridTickColor = "blue";
ds.Options.XScalesGridBorderColor = "blue";

ds.Options.YScalesGridColor = "blue";
ds.Options.YScalesGridTickColor = "blue";
ds.Options.YScalesGridBorderColor = "blue";

ds.Labels = Enumerable.Range(1, _lineDataCount).Select(i => i.ToString());
for (var index = 0; index < _lineDatasetCount; index++)
{
ds.Data.Add(new ChartDataset()
{
BorderWidth = _randomer.Next(1, 5),
Tension = tension,
Label = $"Set {index}",
Data = Enumerable.Range(1, _lineDataCount).Select((i, index) => (index == 2 && hasNull) ? null! : (object)_randomer.Next(20, 37)),
ShowPointStyle = true,
PointStyle = chartPointStyles[_randomer.Next(0, 9)],
PointRadius = 5,
PointHoverRadius = 10
});
}

await Task.Delay(100);
return ds;
}

}