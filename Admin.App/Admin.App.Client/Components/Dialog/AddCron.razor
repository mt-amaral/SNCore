@    using Admin.Shared.Request;
@    using Admin.Shared.Response.Input
@    using Admin.Shared.Response
@inject  HostService HostService
@inject  ModelService ModelService
@inject ExpressionService  ExpressionResponse  
<MudDialog FullWidth="true" Style="width: 800px;height: 580px;">
    <DialogContent >
        <div class="d-flex">
            <MudItem md="7" lg="7">
                <MudSelect T="int" Variant="Variant.Outlined" Label="Seleção" bind-Value="SelectIndex" Margin="Margin.Dense" Style="margin-bottom: 10px" ValueChanged="(SelectItem)"
                           Disabled="@Edit">
                    @foreach (var state in Common)
                    {
                        <MudSelectItem Value="@state.Key">@state.Value</MudSelectItem>
                    }
                </MudSelect>
                
                <div class="d-flex"  style="margin-bottom: 10px">
                    <MudButton Color="Color.Primary "  Variant="Variant.Outlined"  Style="max-height: 35px"  OnClick="@Translator" Disabled="@(!Edit)"  >Tradução</MudButton>
                    <MudSpacer/>
                    <MudIconButton Icon="@(Edit ? Icons.Material.Filled.FormatListBulleted : Icons.Material.Filled.ModeEdit)" Size="Size.Medium"  Color="Color.Primary"  OnClick="@InputEdit"  /> 
                </div>
                
                <MudText Typo="Typo.body2"  Style="margin-bottom: 20px" Color="@(TranslatorText == "Inválido" ? Color.Error :Color.Info)" >@TranslatorText</MudText>
                
                <MudItem Class="d-flex" Style="align-items: center">
                    <MudTextField T="string" Variant="Variant.Outlined" @bind-value="@Expression.Second" Label="Segundo" Margin="Margin.Dense" Style="margin-right: 15px; width: 150px; text-align: center;"
                                  Required="true"   Disabled="(!Edit)" Class="d-inline-flex">
                    </MudTextField>
                    <MudText Typo="Typo.body2" Style="width: 200px" Class="d-inline-flex">Segundo (0 - 59)</MudText>
                </MudItem>
                <MudItem Class="d-flex" Style="align-items: center">
                    <MudTextField T="string" Variant="Variant.Outlined" @bind-value="@Expression.Minute" Label="Minuto" Margin="Margin.Dense" Style="margin-right: 15px; width: 150px; text-align: center;"
                                  Required="true"  Disabled="(!Edit)" Class="d-inline-flex">
                    </MudTextField>
                    <MudText Typo="Typo.body2" Style="width: 200px" Class="d-inline-flex">Minuto (0 - 59)</MudText>
                </MudItem>
                <MudItem Class="d-flex" Style="align-items: center">
                    <MudTextField T="string" @bind-Value="@Expression.Hour" Variant="Variant.Outlined" Label="Hora" Margin="Margin.Dense" Style="margin-right: 15px; width: 150px"
                                  Required="true"  Disabled="(!Edit)" Class="d-inline-flex"/>
                    <MudText Typo="Typo.body2" Class="d-inline-flex" Style="width: 200px"> Horas (0 - 23)</MudText>
                </MudItem>
                <MudItem Class="d-flex" Style="align-items: center">
                    <MudTextField T="string" @bind-Value="@Expression.Day" Variant="Variant.Outlined" Label="Dia" Margin="Margin.Dense" Style="margin-right: 15px; width: 150px"
                                  Required="true" Disabled="(!Edit)"  Class="d-inline-flex"/>
                    <MudText Typo="Typo.body2" Class="d-inline-flex" Style="width: 200px">Dias (1 - 31)</MudText>
                </MudItem>
                <MudItem Class="d-flex" Style="align-items: center">
                    <MudTextField T="string" @bind-Value="@Expression.Month" Variant="Variant.Outlined" Label="Mês" Margin="Margin.Dense" Style="margin-right:  15px; width: 150px;"
                                  Required="true"   Disabled="(!Edit)" Class="d-inline-flex"/>
                    <MudText Typo="Typo.body2" Class="d-inline-flex" Style="width: 200px">Mês (1 - 12 ou JAN - DEC)</MudText>
                </MudItem>
                <MudItem Class="d-flex" Style="align-items: center">
                    <MudTextField T="string" @bind-Value="@Expression.Weesday" Variant="Variant.Outlined" Label="Semana" Margin="Margin.Dense" Style="margin-right: 15px; width: 150px"
                                  Required="true"   Disabled="(!Edit)" Class="d-inline-flex"/>
                    <MudText Typo="Typo.body2" Class="d-inline-flex" Style="width: 200px">Dia de Semana(0 - 6 | Seg - Dom)</MudText>
                </MudItem>

            </MudItem>


            <MudItem md="5" lg="5" Style="padding-left: 20px">


                <MudSelect T="int?" Variant="Variant.Outlined" Label="Host" bind-Value="SelectHost" Clearable="true" Required="true" Margin="Margin.Dense" Style="margin-bottom: 10px"
                           ValueChanged="i => SelectHost = i"  Disabled="@Edit">
                    @if (InputHost is not null)
                    {
                        foreach (var state in InputHost)
                        {
                            <MudSelectItem Value="@state.Id">@state.Name</MudSelectItem>
                        }

                    }
                </MudSelect>

                <MudSelect T="int?" Variant="Variant.Outlined" Label="Model" bind-Value="SelectModel" Clearable="true" Required="true" Margin="Margin.Dense" Style="margin-bottom: 10px"
                           ValueChanged="(e) => ModelItemRequest(e)" >
                    @if(InputModel is not null)
                    {
                        foreach (var state in InputModel)
                        {
                        <MudSelectItem Value="@state.Id" >@state.ModelName</MudSelectItem>
                        }
                    }

                </MudSelect>

                <MudSelect T="int?" Variant="Variant.Outlined" Label="Item" bind-Value="SelectCommand" Clearable="true" Required="true" Margin="Margin.Dense" Style="margin-bottom: 10px"
                          ValueChanged="i => SelectCommand = i" >
                    @if (InputItems is not null)
                    {
                        foreach (var state in InputItems)
                        {
                            <MudSelectItem Value="@state.Id">@state.ItemName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;
    private List<HostInputResponse>? InputHost { get; set; }
    private List<ModelInputResponse>? InputModel { get; set; }
    private List<ItemModelResponse>? InputItems { get; set; }
    private int SelectIndex { get; set; } = 0;
    private int? SelectHost { get; set; } 
    private int? SelectModel { get; set; } 
    private int? SelectCommand { get; set; } 
    private bool Edit { get; set; }
    private CreateExpressionRequest Expression { get; set; } = new();
    private string TranslatorText { get; set; } = "";

    
    private Dictionary<int, string> Common { get; set; } = new()
    {
        { 0, "A cada 3 segundos" },
        { 1, "A cada 5 segundos" },
        { 2, "A cada 10 segundos" },
        { 3, "A cada 30 segundos" },
        { 4, "A cada 1 minuto" },
        { 5, "A cada 3 minuto" },
    };

    protected override async Task OnInitializedAsync()
    {
        InputModel =  await ModelService.GetModelsInputAsync();
        InputHost = await HostService.GetHostsListAsync();
    }
    private void InputEdit()
    {
        Edit = !Edit;  
        TranslatorText = "" ;
    }
    
    private  async Task Translator()
    {
        if (ValideExpression())
        {
            var expression = $"{Expression.Second} {Expression.Minute} {Expression.Hour} {Expression.Day} {Expression.Month} {Expression.Weesday}";
            TranslatorText = await ExpressionResponse.GetTranslationAsync(expression) ?? "Erro consulta";
        }
    }

    private bool ValideExpression()
    {
        if (Expression.Second != string.Empty && Expression.Minute != string.Empty && Expression.Hour != string.Empty
            && Expression.Day != string.Empty && Expression.Month != string.Empty && Expression.Weesday != string.Empty)
            return true;

        TranslatorText = "Inválido";
        return false;
    }

    private async Task ModelItemRequest(int? modelId)
    {
        if (modelId is not null)
            InputItems = await ModelService.GetItemsAsync((int)modelId);
    }

    private void AddItem()
    {
        if(SelectCommand is not null)
            Expression.ItemId = (int)SelectCommand;
        
        if(SelectHost is not null)
            Expression.HostId = (int)SelectHost;
    }
    private async Task SelectItem(int index)
    {
        switch (index)
        {
            case 0:
                Expression.Second = "0"; 
                Expression.Minute = "*";
                Expression.Hour = "*";
                Expression.Day = "*";
                Expression.Month = "*";
                Expression.Weesday = "*";
                break;
            case 1:
                Expression.Second = "0/5"; 
                Expression.Minute = "*";
                Expression.Hour = "*";
                Expression.Day = "*";
                Expression.Month = "*";
                Expression.Weesday = "*";
                break;
            case 2:
                Expression.Second = "0/10"; 
                Expression.Minute = "*";
                Expression.Hour = "*";
                Expression.Day = "*";
                Expression.Month = "*";
                Expression.Weesday = "*";
                break;
            case 3:
                Expression.Second = "0"; 
                Expression.Minute = "*";
                Expression.Hour = "*";
                Expression.Day = "*";
                Expression.Month = "*";
                Expression.Weesday = "*";
                break;
            case 4:
                Expression.Second = "0"; 
                Expression.Minute = "*";
                Expression.Hour = "*";
                Expression.Day = "*";
                Expression.Month = "*";
                Expression.Weesday = "*";
                break;
            case 5:
                Expression.Second = "0"; 
                Expression.Minute = "*";
                Expression.Hour = "*";
                Expression.Day = "*";
                Expression.Month = "*";
                Expression.Weesday = "*";
                break;
        }
        await Translator();
    }

    private async void Submit()
    {
        try
        {
            AddItem();
           await ExpressionResponse.CreateExpressionAsync(Expression);
           
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch(Exception ex)
        {
            throw;
        }
    } 

    private void Cancel() => MudDialog.Cancel();
    

}