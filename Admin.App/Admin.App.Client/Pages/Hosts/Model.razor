@page "/model"
@using Admin.Shared.Response
@inject ModelService ModelService


<MudGrid Justify="Justify.Center" Style="height: 130px; align-items: center">
    <MudItem xs="12" sm="12" md="4" lg="6" xl="6" xxl="6">
        <MudTextField @bind-Value="Search" Label="Search" Variant="Variant.Outlined" 
                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" 
                      AdornmentColor="Color.Primary" Margin="Margin.Dense" Immediate="true"/>
    </MudItem>
</MudGrid>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid Justify="Justify.Center" Spacing="5" Style="height: 300px; align-items: center">
        @if (Filtered is not null)
        {
            @foreach (ModelResponse model in Filtered)
            {
                <MudItem xs="12" sm="12" md="4" lg="3" xl="2" xxl="2">
                    <a href="/model/@model.Id">
                        <MudPaper Class="d-flex align-center mud-width-full py-1" Style="cursor: pointer;" Elevation="2">
                            <MudImage Src="@model.SrcIcon" Height="60" Class="pa-2" Style="border-radius: 20%;"/>
                            <MudText Typo="Typo.h6">@model.Name</MudText>
                        </MudPaper>
                    </a>
                </MudItem>
            }
        }
        else
        {
            <MudItem sm="12" md="4" lg="8" xl="10" xxl="10">
                <MudProgressLinear Color="Color.Primary" Indeterminate="IsLoad" Class="my-6" Rounded="true"/>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private bool IsLoad { get; set; } = true;
    private string _search = string.Empty;
    private IEnumerable<ModelResponse>? Models { get; set; }
    private IEnumerable<ModelResponse>? Filtered { get; set; }

    private string Search
    {
        get => _search;
        set
        {
            if (_search != value)
            {
                _search = value;
                FilterList();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Models = await ModelService.GetModelsAsync();
        IsLoad = false; 
        FilterList(); 
    }

    private void FilterList()
    {
        if (Models == null)
        {
            Filtered = null;
            return;
        }
        
        Filtered = string.IsNullOrWhiteSpace(Search)
            ? Models
            : Models.Where(m => m.Name.Contains(Search, StringComparison.OrdinalIgnoreCase));
    }
}