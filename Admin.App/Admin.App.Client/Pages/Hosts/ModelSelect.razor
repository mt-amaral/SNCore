@page "/model/{id:int}"
@using Admin.Shared.Response
@inject ModelService ModelService

<MudGrid Justify="Justify.Center">
    @if (Items != null)
    {
        <MudItem xs="12" sm="12" md="5">
            
            <MudDataGrid Items="@FilteredItems" Dense="true" Striped="true" FixedHeader="true" Elevation="0">
                <ToolBarContent>
                    <MudTextField T="string" Placeholder="Search" Adornment="Adornment.End" Variant="Variant.Outlined"
                                  AdornmentIcon="@Icons.Material.Outlined.Search" IconSize="Size.Small"
                                  Margin="Margin.Dense" Class="mt-0" @bind-Value="Search" Immediate="true"/>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.ItemName" Title="Item" Editable="true"/>
                    <PropertyColumn Property="x => x.OidName" Title="Oid" Editable="true"/>
                    <TemplateColumn CellClass="d-flex justify-end" Sortable="false" ShowColumnOptions="false">
                        <CellTemplate>
                            <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter] public int Id { get; set; }

    private string _search = string.Empty;
    private IEnumerable<ItemModelResponse?>? Items { get; set; } = null;
    private IEnumerable<ItemModelResponse?>? FilteredItems { get; set; } = null;

    private string Search
    {
        get => _search;
        set
        {
            if (_search != value)
            {
                _search = value;
                FilterList(); 
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Items = await ModelService.GetItemsAsync(Id) ?? new List<ItemModelResponse>();
        FilteredItems = Items; 
    }

    private void FilterList()
    {
        if (Items == null)
        {
            FilteredItems = null;
            return;
        }
        
        FilteredItems = string.IsNullOrWhiteSpace(Search)
            ? Items
            : Items.Where(x =>
                (x?.ItemName?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x?.OidName?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false)
            );
    }
}