@page "/infrastructure/hostgroup"
@using Admin.Shared.Response.Host
@using Admin.App.Client.Components
@using Admin.App.Client.Components.Dialogs
@using Admin.Shared.Request.Host
@using Admin.App.Client.Components.Tabs
@attribute [Authorize]
@inject IGroupHostService GroupHostService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<SimpleTabs>
    <TabItem Title="Groups">
        <MudItem xs="12" sm="6" md="4"  Style="margin: 0 auto" >
            <MudAutocomplete T="string"
                             ShrinkLabel="true"
                             Label="Name"
                             Margin="Margin.Dense"
                             Variant="Variant.Outlined"
                             SearchFunc="@SearchGroups"
                             Value="ValueSearch"
                             ValueChanged="OnSearchChanged"
                             ResetValueOnEmptyText="true"
                             CoerceText="true"
                             CoerceValue="true"
                             SelectValueOnTab="true"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Primary" />


        </MudItem>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="OpenCreateDialog">
                       Create</MudButton>

            <div style="display: flex; gap: 8px;">
                <MudButton Variant="Variant.Filled"  Disabled="DisabledBnt" 
                           OnClick="OpenDeleteDialog" Color="Color.Error">Delete</MudButton>
            </div>
        </div>

    </TabItem>
</SimpleTabs>

<MudTable T="GroupHostResponse?"
          Dense="true"
          Loading="Loading"
          Items="@FilteredHostGroups"
          Striped="true"
          MultiSelection="true"
          @bind-SelectedItems="_selectedGroup"
          Hover="true">
    <ColGroup>
        <col style="width: 60px;" />/>
        <col  />
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @context?.GroupName
        </MudTd>
        <MudTd DataLabel="Editar" Style="text-align: right;">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default"
                            Size="Size.Small" OnClick="@(() => OpenEditDialog(context))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <div class="pageContainer" style="display: flex; justify-content: space-between; width: 100%; align-items: center; ">
            <div class="mud-table-page-number-information" style="margin-left: 2%">Selected: @_selectedGroup.Count </div>
            <MudTablePager Style="border-top: none" HideRowsPerPage="true" InfoFormat="All groups: {all_items}" PageSizeOptions="[15]" />
        </div>
    </PagerContent>
</MudTable>

@code {
    private string ValueSearch { get; set; } = string.Empty;

    private List<GroupHostResponse?>? HostGroups { get; set; } = new();
    private List<GroupHostResponse?>? FilteredHostGroups { get; set; } = new();
    private HashSet<GroupHostResponse> _selectedGroup = new();
    private bool Loading { get; set; } = true;  
    private bool DisabledBnt => !_selectedGroup.Any();
    private GroupHostFilter Filter = new();

    protected override async Task OnInitializedAsync()
    {
        HostGroups = await GroupHostService.GetHostGroupList(Filter).HandleResponseAsync(Snackbar);
        FilteredHostGroups = HostGroups?.ToList();
        Loading = false;
    }

    private Task<IEnumerable<string>> SearchGroups(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value) || HostGroups is null)
            return Task.FromResult(Enumerable.Empty<string>());

        var result = HostGroups
            .Where(x => x != null && x.GroupName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.GroupName)
            .Distinct();

        return Task.FromResult(result);
    }

    private async Task OnSearchChanged(string value)
    {
        ValueSearch = value;

        if (string.IsNullOrWhiteSpace(value))
        {
            FilteredHostGroups = HostGroups?.ToList();
        }
        else
        {
            FilteredHostGroups = HostGroups?
                .Where(x => x != null && x.GroupName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
        await InvokeAsync(StateHasChanged); 
    }
    
    
    private async Task OpenCreateDialog()
    {
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true, 
            FullWidth = true,
            MaxWidth = MaxWidth.Small 
        };

        var dialog = DialogService.Show<CreateGroup>("Create Group", new DialogParameters(), options);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled)
        {
            FilteredHostGroups?.Insert(0, result.Data as GroupHostResponse );
            HostGroups?.Insert(0, result.Data as GroupHostResponse );
        }
    }
    
    private async Task OpenDeleteDialog()
    {
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true, 
            FullWidth = true,
            MaxWidth = MaxWidth.Small 
        };
        var parameters = new DialogParameters
        {
            { nameof(DeleteGroup._selectedGroup), _selectedGroup.ToList() } // Converte para List<T> se _selectedGroup for HashSet<T>
        };
        var dialog = DialogService.Show<DeleteGroup>("Delete Group", parameters, options);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled)
        {
            foreach (var i in _selectedGroup)
            {
                FilteredHostGroups.Remove(i);
                HostGroups.Remove(i);
            }
            _selectedGroup.Clear();
        }
    }
    
    private async Task OpenEditDialog(GroupHostResponse item)
    {
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true, 
            FullWidth = true,
            MaxWidth = MaxWidth.Small 
        };
        var parameters = new DialogParameters
        {
            { nameof(EditGroup.Item), item } 
        };
        var dialog = DialogService.Show<EditGroup>("EditGroup", parameters, options);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled)
        {
            
            var updatedItem = (GroupHostResponse)result.Data;
            
            var index = FilteredHostGroups.IndexOf(item);
            if (index >= 0)
            {
                FilteredHostGroups[index] = updatedItem;
            }
            
            var index2 = HostGroups.IndexOf(item);
            if (index2 >= 0)
            {
                HostGroups[index2] = updatedItem;
            }
        }
            
    }

}