@page "/login"
@attribute [IgnoreAntiforgeryToken]
@rendermode RenderMode.InteractiveServer
@using Admin.App.Client.Data
@using Admin.App.Client.Layout
@using Admin.Shared.Request.Identity
@using Microsoft.AspNetCore.Mvc
@layout LoginLayout
@inject  ISnackbar Snackbar
@inject  UserService UserService
@inject  NavigationManager NavigationManager
<MudGrid Justify="Justify.Center" Spacing="2" Style=" align-items: center; height: 700px">
    <MudItem xs="12" sm="8" md="6" lg="3">
        <div class="d-flex">
            <MudText Typo="Typo.h4" Color="Color.Primary" Style="margin:  20px auto 40px;">Login</MudText>
        </div>
        <MudCard Style="padding: 50px 40px 40px">
                <EditForm Model="login" OnValidSubmit="LoginAsync">
                    <MudTextField @bind-Value="login.Username"
                                  Label="User"
                                  FullWidth="true"
                                  Class="mb-4"
                                  Variant="Variant.Outlined"/>

                    <MudTextField @bind-Value="login.Password"
                                  Label="Password"
                                  InputType="InputType.Password"
                                  FullWidth="true"
                                  Class="mb-4"
                                  Variant="Variant.Outlined"/>
                    <MudCheckBox @bind-Value="CheckBox" Color="Color.Primary" Style="margin-bottom: 30px">Remember</MudCheckBox>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true" Style="height: 50px">
                        Login
                    </MudButton>
                </EditForm>
            
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private bool CheckBox { get; set; } = false;
    private LoginRequest login { get; set; } = new();
    private bool IsBusy;
    
    private async Task LoginAsync()
    { 
        IsBusy = true;
        try
        {
            var result = await UserService.Login(login);

            if (result.IsSuccess)
            {
                NavigationManager.NavigateTo("/");
            }
            else
                Snackbar.Add(result.Message!, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            IsBusy = false;
        }
    }
}