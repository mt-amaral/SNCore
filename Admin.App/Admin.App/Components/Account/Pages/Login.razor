@page "/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Admin.Domain.Account
@using Admin.App.Client.Layout
@using Admin.App.Security
@using Admin.Application.Interfaces
@layout LoginLayout
@inject SignInManager<User> SignInManager
@inject IUserService IUserService
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager

<MudGrid Justify="Justify.Center" Spacing="2" Style=" align-items: center; height: 700px">
    <MudItem xs="12" sm="8" md="6" lg="3">
        <div class="d-flex">
            <MudText Typo="Typo.h4" Color="Color.Primary" Style="margin:  20px auto 40px;">Login</MudText>
        </div>
        <MudCard Style="padding: 50px 40px 40px">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            
            <MudGrid>
                <MudItem md="12" xs="12" sm="12" lg="12" >
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email" 
                                        Label="Email" Placeholder="name@example.com"
                                        FullWidth="true"
                                        Class="mb-4"
                                        Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem  md="12" xs="12" sm="12" lg="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password" 
                                        Label="Password" InputType="InputType.Password" Placeholder="password"
                                        FullWidth="true"
                                        Class="mb-4"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Visibility"  AdornmentToggledIcon="@Icons.Material.Outlined.VisibilityOff"
                                        AdornmentClickFunction="showPassword"
                                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" Color="Color.Primary" Style="margin-bottom: 20px" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12" xs="12" sm="12" lg="12">
                    <MudStaticButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Style="height: 50px"
                        FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
                    
            </MudGrid>
        </EditForm>

        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SignInManager.Context.User.Identity != null && SignInManager.Context.User.Identity.IsAuthenticated)
            RedirectManager.RedirectTo(ReturnUrl);
        
        if (HttpMethods.IsGet(HttpContext.Request.Method))
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
    }
    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true

        var result = await IUserService.Login(new() { UserEmail = Input.Email, Password = Input.Password }, Input.RememberMe);
        if (result.IsSuccess)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
