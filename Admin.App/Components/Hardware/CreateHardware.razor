@namespace Admin.App.Componentes.Hardware
@inject ISnackbar Snackbar

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true" Style="width: 600px;height: 400px;">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            New Hardware
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@hardwareNew">
            <MudContainer>
                <MudTabs>
                    <MudTabPanel Text="Hardware">
                        
                        <MudTextField 
                            @bind-Value="hardwareNew.Name" Label="Name" Required="true" Margin="Margin.Dense" />
                        <MudTextField @bind-Value="hardwareNew.Description" Label="Description" Required="true" Margin="Margin.Dense" />
                        <MudGrid>
                        <MudItem xs="6">
                                <MudSelect T="HardwareModel" Label="Model" @bind-Value="hardwareNew.Model" Margin="Margin.Dense" Dense="true">
                                @foreach (HardwareModel model in Enum.GetValues(typeof(HardwareModel)))
                                {
                                    <MudSelectItem Value="model">@model</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField @bind-Value="hardwareNew.Ipv4" Label="IP Address" MaxLength="15" Required="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudCheckBox @bind-Value="boleanSnmp">SNMP</MudCheckBox>
                        </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                    <MudTabPanel Text="Snmp" Disabled="@(boleanSnmp ? false : true)">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="snmpNew.Community" Label="Community" Required="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudSelect T="SNMPVersion" Label="Model" @bind-Value="snmpNew.SnmpVersion"  Margin="Margin.Dense" Dense="true" >
                                    @foreach (SNMPVersion model in Enum.GetValues(typeof(SNMPVersion)))
                                    {
                                        <MudSelectItem Value="model">@model</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="3">
                                <MudTextField @bind-Value="snmpNew.Port" Label="Port" Required="true" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                </MudTabs>
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions >
        <div style="display: flex; justify-content: flex-end;">
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Add">Add Hardware</MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public HardwareResponse hardwareNew { get; set; } = new ();
    private SnmpRequest snmpNew { get; set; } = new();
    private HardwareRequest hardwareValid { get; set; } = new ();
    private HardwareValidation<HardwareResponse> validator = new ();
    public bool boleanSnmp { get; set; }

    protected override void OnInitialized()
    {
        snmpNew.Community = "public";
        snmpNew.Port = 161;
        hardwareNew.Ipv4 = "0.0.0.0";
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Add()
    {
        try
        {
            var validationResult = validator.Validate(hardwareNew);
            if (!validationResult.IsValid)
            {
                foreach (var error in validationResult.Errors)
                {
                    Snackbar.Add(error.ErrorMessage, Severity.Error);
                }
                return;
            }
            hardwareValid = Mapper.MapperToJson(hardwareNew);
            MudDialog.Close(DialogResult.Ok(hardwareValid));
        }
        catch (Exception ex)
        {
            
        }
    }
}
