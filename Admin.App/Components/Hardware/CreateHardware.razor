@namespace Admin.App.Componentes.Hardware
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            Add New Server
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="hardwareNew.Name" Label="Name" Required="true" />
        <MudTextField @bind-Value="hardwareNew.Description" Label="Description" Required="true" />
        <MudTextField @bind-Value="hardwareNew.Model" Label="Modelo" Required="true" />
        <MudTextField @bind-Value="hardwareNew.Ipv4" Label="IP Address" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Add">Add Server</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public HardwareResponse hardwareNew { get; set; } = new HardwareResponse();
    private HardwareRequest hardwareValid { get; set; } = new HardwareRequest();
    private HardwareValidation validator = new HardwareValidation();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Add()
    {
        try
        {
            var validationResult = validator.Validate(hardwareNew);
            if (!validationResult.IsValid)
            {
                foreach (var error in validationResult.Errors)
                {
                    Snackbar.Add(error.ErrorMessage, Severity.Error);
                }
                return;
            }
            hardwareValid = Mapper.MapperToJson(hardwareNew);
            MudDialog.Close(DialogResult.Ok(hardwareValid));
        }
        catch (Exception ex)
        {
            
        }
    }
}
