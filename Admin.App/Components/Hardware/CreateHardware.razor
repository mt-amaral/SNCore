@namespace Admin.App.Componentes.Hardware
@inject ISnackbar Snackbar
@inject IMapper mapper

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true" Style="width: 900px;height: 530px;">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            New Hardware
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@hardwareNew">
            <MudContainer>
                <MudTabs Style="width: 100%;height: 300px;" PanelClass="pa-4" ActivePanelIndex=@selectIndex>
                    <MudTabPanel Text="Hardware">
                        <MudItem xs="12">
                            <MudTextField @bind-Value="hardwareNew.Name" Label="Name" Required="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="hardwareNew.Description" Label="Description" Required="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudSelect T="HardwareModel" Label="Model" @bind-Value="hardwareNew.Model" Margin="Margin.Dense" Dense="true">
                                    @foreach (HardwareModel model in Enum.GetValues(typeof(HardwareModel)))
                                    {
                                        <MudSelectItem Value="model">@model</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="hardwareNew.Ipv4" Label="IP Address" MaxLength="15" Required="true" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                    <MudTabPanel Text="Snmp" Disabled="@(boleanSnmp ? false : true)">
                        <MudGrid>
                            @if (boleanSnmp)
                            {
                                <MudItem xs="6">
                                    <MudTextField @bind-Value="snmpNew.Community" Label="Community" Required="true" Margin="Margin.Dense" />
                                </MudItem>
                                <MudItem xs="3">
                                    <MudSelect T="SNMPVersion" Label="Model" @bind-Value="snmpNew.SnmpVersion" Margin="Margin.Dense" Dense="true">
                                        @foreach (SNMPVersion model in Enum.GetValues(typeof(SNMPVersion)))
                                        {
                                            <MudSelectItem Value="model">@model</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudTextField @bind-Value="snmpNew.Port" Label="Port" Required="true" Margin="Margin.Dense" />
                                </MudItem>
                            }
                            else
                            {
                                
                            }
                        </MudGrid>
                    </MudTabPanel>
                    <MudTabPanel Text="Telnet" Disabled="@(boleanTelnet ? false : true)">
                        <MudGrid>
                            @if (boleanTelnet)
                            {
                                <MudItem xs="6">
                                    <MudTextField @bind-Value="telnetNew.User" Label="User" Required="true" Margin="Margin.Dense" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField @bind-Value="telnetNew.Password"
                                                  Label="Password"
                                                  Required="true"
                                                  Margin="Margin.Dense"
                                                  InputType="@PasswordInput"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@PasswordInputIcon"
                                                  OnAdornmentClick="ButtonTestclick"
                                                  AdornmentAriaLabel="Show Password" />
                                </MudItem>
                                <MudItem xs="3">
                                    <MudTextField @bind-Value="telnetNew.Port" Label="Port" Required="true" Margin="Margin.Dense" />
                                </MudItem>
                            }
                            else
                            {
                                
                            }
                        </MudGrid>
                    </MudTabPanel>
                </MudTabs>
                <MudGrid Style="width: 100%;">
                    <MudCheckBox T="bool" @bind-Value="boleanSnmp" CheckedChanged="@(e => SmartInput())">SNMP</MudCheckBox>
                    <MudCheckBox T="bool" @bind-Value="boleanTelnet" CheckedChanged="@(e => SmartInput())">Telnet</MudCheckBox>
                </MudGrid>
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Add">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateHardwareFull hardwareNew { get; set; } = new();
    private SnmpPayload snmpNew { get; set; } = new();
    private TelnetPayload telnetNew { get; set; } = new();

    private HardwareValidation<HardwarePayload> validatorHardware = new();
    private SnmpValidation<SnmpPayload> validatorSNMP = new();
    private TelnetValidation<TelnetPayload> validatorTelnet = new();

    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool boleanSnmp { get; set; }
    private bool boleanTelnet { get; set; }
    private int selectIndex = 0;
    private bool isShow { get; set; }
    bool closeDialog = true;


    protected override void OnInitialized()
    {
        snmpNew.Community = "public";
        snmpNew.Port = 161;
        snmpNew.SnmpVersion = SNMPVersion.v2;
        hardwareNew.Ipv4 = "0.0.0.0";
        telnetNew.Port = 23;
    }
    private void ButtonTestclick()
    {
        isShow = !isShow;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }


    private void SmartInput()
    {
        if (!boleanSnmp && selectIndex == 1)
        {
            selectIndex = 0;
        }
        else if (boleanSnmp && selectIndex == 0)
        {
            selectIndex = 1;
        }
        else if (!boleanTelnet && selectIndex == 2)
        {
            selectIndex = (boleanSnmp ? 1 : 0);
        }
        else if (boleanTelnet && selectIndex == 0)
        {
            selectIndex = 2;
        }
        selectIndex = Math.Clamp(selectIndex, 0, 2);
    }

    private bool ValidSnmp()
    {
        var validationSNMPResult = validatorSNMP.Validate(snmpNew);
        foreach (var error in validationSNMPResult.Errors)
        {
            Snackbar.Add(error.ErrorMessage, Severity.Error);
        }
        return !validationSNMPResult.Errors.Any();
    }
    private bool ValidTelnet()
    {
        var validationTelnetResult = validatorTelnet.Validate(telnetNew);
        foreach (var error in validationTelnetResult.Errors)
        {
            Snackbar.Add(error.ErrorMessage, Severity.Error);
        }
        return !validationTelnetResult.Errors.Any();
    }

    private bool ValidHardware()
    {
        var validationHardwareResult = validatorHardware.Validate(hardwareNew);
        if (!validationHardwareResult.IsValid)
        {
            foreach (var error in validationHardwareResult.Errors)
            {
                Snackbar.Add(error.ErrorMessage, Severity.Error);
            }
        }
        return validationHardwareResult.IsValid;
    }

    private void ValidInputSnmp()
    {
        if (!ValidSnmp())
            closeDialog = false;
        else
        {
            mapper.Map(snmpNew, hardwareNew);
        }

    }
    private void ValidInputTelnet()
    {
        if (!ValidTelnet())
            closeDialog = false;
        else
        {
            mapper.Map(telnetNew, hardwareNew);
        }

    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }


    private void Add()
    {
        try
        {
            if (!ValidHardware()) return;

            if (boleanSnmp)
                ValidInputSnmp();
            else if (!boleanSnmp)
                hardwareNew.Snmp = null;

            if (boleanTelnet)
                ValidInputTelnet();
            else if (!boleanTelnet)
                hardwareNew.Telnet = null;

            if (closeDialog || (!boleanSnmp && !boleanTelnet))
            {
                MudDialog.Close(DialogResult.Ok(hardwareNew));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

}
