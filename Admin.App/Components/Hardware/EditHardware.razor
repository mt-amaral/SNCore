@namespace Admin.App.Componentes.Hardware
@inject HardwareApi hardwareApi
@inject ISnackbar Snackbar
@inject IMapper mapper

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true" Style="width: 900px;height: 530px;">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            Edit Hardware
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (loading)
        {
            <MudContainer Style="width: 100%;height: 296px;">
                <MudProgressLinear Color="Color.Dark" Indeterminate="true" Class="my-7" />
            </MudContainer>
        }
        else
        {

        <MudForm Model="@hardwareEdit">
            <MudContainer>
                    <MudTabs Style="width: 100%;height: 300px;" PanelClass="pa-4" ActivePanelIndex=@selectIndex>
                    <MudTabPanel Text="Hardware">
                        <MudItem xs="12">
                            <MudTextField @bind-Value="hardwareEdit.Name" Label="Name" Required="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="hardwareEdit.Description" Label="Description" Required="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudSelect T="HardwareModel" Label="Model" @bind-Value="hardwareEdit.Model" Margin="Margin.Dense" Dense="true">
                                    @foreach (HardwareModel model in Enum.GetValues(typeof(HardwareModel)))
                                    {
                                        <MudSelectItem Value="model">@model</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="hardwareEdit.Ipv4" Label="IP Address" MaxLength="15" Required="true" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                        <MudTabPanel Text="Snmp" Disabled="@(boleanSnmp ? false : true)" BadgeColor="Color.Dark">
                        <MudGrid>
                                @if (boleanSnmp)
                                {
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="snmpEdit.Community" Label="Community" Required="true" Margin="Margin.Dense" />
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudSelect T="SNMPVersion" Label="Version" @bind-Value="snmpEdit.SnmpVersion" Margin="Margin.Dense" Dense="true">
                                            @foreach (SNMPVersion model in Enum.GetValues(typeof(SNMPVersion)))
                                            {
                                                <MudSelectItem Value="model">@model</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudTextField @bind-Value="snmpEdit.Port" Label="Port" Required="true" Margin="Margin.Dense" />
                                    </MudItem>
                                }

                        </MudGrid>
                    </MudTabPanel>
                    <MudTabPanel Text="Telnet" Disabled="@(boleanTelnet ? false : true)">
                        <MudGrid>
                            @if (boleanTelnet)
                                {
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="telnetEdit.User" Label="User" Required="true" Margin="Margin.Dense" />
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="telnetEdit.Password"
                                                      Label="Password"
                                                      Required="true"
                                                      Margin="Margin.Dense"
                                                      InputType="@PasswordInput"
                                                      Adornment="Adornment.End"
                                                      AdornmentIcon="@PasswordInputIcon"
                                                      OnAdornmentClick="ButtonTestclick"
                                                      AdornmentAriaLabel="Show Password" />
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudTextField @bind-Value="telnetEdit.Port" Label="Port" Required="true" Margin="Margin.Dense" />
                                    </MudItem>
                                }
                        </MudGrid>
                    </MudTabPanel>
                </MudTabs>
                <MudGrid Style="width: 100%;">
                        <MudCheckBox T="bool" @bind-Value="boleanSnmp" CheckedChanged="@(e => SmartInput())">SNMP</MudCheckBox>
                        <MudCheckBox T="bool" @bind-Value="boleanTelnet" CheckedChanged="@(e => SmartInput())">Telnet</MudCheckBox>
                </MudGrid>
            </MudContainer>
        </MudForm>
        }
    </DialogContent>
    <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Commit">Edit Hardware</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public HardwareResponse hardwareEdit { get; set; }
    private HardwareRequest hardwareEdited { get; set; } = new();
    private SnmpPayload snmpEdit { get; set; }
    private TelnetPayload telnetEdit { get; set; }

    private HardwareValidation<HardwareResponse> validatorHardware = new();
    private SnmpValidation<SnmpPayload> validatorSNMP = new();
    private TelnetValidation<TelnetPayload> validatorTelnet = new();

    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    public bool boleanSnmp { get; set; }
    private bool boleanTelnet { get; set; }
    private int selectIndex = 0;
    private bool isShow { get; set; }
    bool closeDialog = true;
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hardwareEdit = await hardwareApi.GetHardwareId(hardwareEdit.Id);
            Start();
        }
        finally
        {
            loading = false;
        }
    }


    private void Start()
    {
        snmpEdit = hardwareEdit.Snmp;
        boleanSnmp = snmpEdit != null;
        if (snmpEdit == null)
        {
            snmpEdit = new SnmpPayload()
            {
                Community = "public",
                Port = 161,
                SnmpVersion = SNMPVersion.v2,
            };
        };

        telnetEdit = hardwareEdit.Telnet;
        boleanTelnet = telnetEdit != null;
        if (telnetEdit == null)
        {
            telnetEdit = new TelnetPayload()
            {
                Port = 23,
            };
        }
    }

    private void ButtonTestclick()
    {
        isShow = !isShow;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private void SmartInput()
    {
        if (!boleanSnmp && selectIndex == 1)
        {
            selectIndex = 0;
        }
        else if (boleanSnmp && selectIndex == 0)
        {
            selectIndex = 1;
        }
        else if (!boleanTelnet && selectIndex == 2)
        {
            selectIndex = (boleanSnmp ? 1 : 0);
        }
        else if (boleanTelnet && selectIndex == 0)
        {
            selectIndex = 2;
        }
    }

    private bool ValidSnmp()
    {
        var validationSNMPResult = validatorSNMP.Validate(snmpEdit);
        foreach (var error in validationSNMPResult.Errors)
        {
            Snackbar.Add(error.ErrorMessage, Severity.Error);
        }
        return !validationSNMPResult.Errors.Any();
    }
    private bool ValidTelnet()
    {
        var validationTelnetResult = validatorTelnet.Validate(telnetEdit);
        foreach (var error in validationTelnetResult.Errors)
        {
            Snackbar.Add(error.ErrorMessage, Severity.Error);
        }
        return !validationTelnetResult.Errors.Any();
    }

    private bool ValidHardware()
    {
        var validationHardwareResult = validatorHardware.Validate(hardwareEdit);
        if (!validationHardwareResult.IsValid)
        {
            foreach (var error in validationHardwareResult.Errors)
            {
                Snackbar.Add(error.ErrorMessage, Severity.Error);
            }
        }
        else if (validationHardwareResult.IsValid)
        {
            mapper.Map(hardwareEdit, hardwareEdited);
        }
        return validationHardwareResult.IsValid;
    }

    private void ValidInputSnmp()
    {
        if (!ValidSnmp())
            closeDialog = false;
        else
        {
            mapper.Map(snmpEdit, hardwareEdited);
        }
    }
    private void ValidInputTelnet()
    {
        if (!ValidTelnet())
            closeDialog = false;
        else
        {
            mapper.Map(telnetEdit, hardwareEdited);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Commit()
    {
        try
        {
            if (!ValidHardware()) return;
                
            if (boleanSnmp)
                ValidInputSnmp();
            else if (!boleanSnmp)
                hardwareEdit.Snmp = null;

            if (boleanTelnet)
                ValidInputTelnet();
            else if (!boleanTelnet)
                hardwareEdit.Telnet = null;

            if (closeDialog || (!boleanSnmp && !boleanTelnet))
            {
                MudDialog.Close(DialogResult.Ok(hardwareEdited));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }
}
