@page "/hardware/edit/{hardwareId:int}"

@inject HardwareApi hardwareApi
@inject NavigationManager NavigationManager


<EditForm Model="@hardwareEdit" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudContainer MaxWidth="MaxWidth.Small" >
        <MudTextField @bind-Value="hardwareEdit.Description" Label="Description" />
        <MudTextField @bind-Value="hardwareEdit.Model" Label="Model" />
        <MudTextField @bind-Value="hardwareEdit.Ipv4" Label="IPv4" />

        <MudButton OnClick="HandleValidSubmit" Variant="Variant.Outlined">Salvar</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </MudContainer>
</EditForm>

@code {
    [Parameter] public int hardwareId { get; set; }
    private HardwareResponse hardwareEdit = new HardwareResponse();
    private HardwareRequest hardwareEdited = new HardwareRequest();
    private SnmpRequest snpmEdit = new SnmpRequest();
    private SnmpResponse snpmEdited = new SnmpResponse();

    private HardwareRequest MapHardware(HardwareResponse hardwareEdit)
    {
        return new HardwareRequest()
        {
                Id = hardwareEdit.Id,
                Description = hardwareEdit.Description,
                Model = hardwareEdit.Model,
                Ipv4 = hardwareEdit.Ipv4
        };
    }
    private SnmpRequest MapSnmp(SnmpResponse snpmEdited)
    {
        return new SnmpRequest()
        {
            Id = snpmEdit.Id,
            Version = snpmEdit.Version,
            Community = snpmEdit.Community,
            Port = snpmEdit.Port,
            HardwareId = snpmEdit.HardwareId
        };
    }

    protected override async Task OnInitializedAsync()
    {
        hardwareEdit = await hardwareApi.GetHardwareId(hardwareId);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            hardwareEdited = MapHardware(hardwareEdit);
            await hardwareApi.EditHardwareAsync(hardwareEdited);
            NavigationManager.NavigateTo("/hardware");
        }
        catch
        {
            ;
        }

    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/hardware");
    }
}
