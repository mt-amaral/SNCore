@page "/hardware/edit/{hardwareId:int}"

@inject HardwareApi hardwareApi
@inject SnmpApi snmpApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<MudContainer MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5" Color="Color.Dark" Class="mb-4">Settings</MudText>
    <MudTabs Elevation="25" SliderColor="Color.Dark" PanelClass="mt-4" ApplyEffectsToContainer="false">
        <MudTabPanel Text="Hardware">
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <EditForm Model="@hardwareEdit" OnValidSubmit="HandleValidSubmit">
                            <MudTextField @bind-Value="hardwareEdit.Name" Label="Name" Required="true" />
                            <MudTextField @bind-Value="hardwareEdit.Description" Label="Description" Required="true" />
                            <MudSelect T="HardwareModel" Label="Model" @bind-Value="hardwareEdit.Model">
                                @foreach (HardwareModel model in Enum.GetValues(typeof(HardwareModel)))
                                {
                                    <MudSelectItem Value="model">@model</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField @bind-Value="hardwareEdit.Ipv4" Label="IPv4" Required="true" />
                            <MudButton OnClick="HandleValidSubmit" Variant="Variant.Outlined">Salvar</MudButton>
                            <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
                        </EditForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="SNMP">
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <EditForm Model="@hardwareSnmp" OnValidSubmit="HandleValidSubmit">
                            <MudSelect T="SNMPVersion" Label="Model" @bind-Value="hardwareSnmp.SnmpVersion">
                                @foreach (SNMPVersion model in Enum.GetValues(typeof(SNMPVersion)))
                                {
                                    <MudSelectItem Value="model">@model</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField @bind-Value="hardwareSnmp.Community" Label="Community" Required="true" />
                            <MudTextField @bind-Value="hardwareSnmp.Port" Label="Port" Required="true" />
                        </EditForm>
                    </MudPaper>
                    <MudPaper Class="pa-4 mt-4">
                        <MudButton OnClick="HandleValidSubmit" Variant="Variant.Outlined">Salvar</MudButton>
                        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    [Parameter] public int hardwareId { get; set; }
    private HardwareResponse hardwareEdit = new HardwareResponse();
    private HardwareRequest hardwareEdited = new HardwareRequest();
    private HardwareValidation<HardwareResponse> validator = new HardwareValidation<HardwareResponse>();

    private SnmpResponse hardwareSnmp = new SnmpResponse();

    protected override async Task OnInitializedAsync()
    {
        hardwareEdit = await hardwareApi.GetHardwareId(hardwareId);
        hardwareSnmp = await snmpApi.SelectByHardware(hardwareId);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var validationResult = validator.Validate(hardwareEdit);
            if (!validationResult.IsValid)
            {
                foreach (var error in validationResult.Errors)
                {
                    Snackbar.Add(error.ErrorMessage, Severity.Error);
                }
                return;
            }
            hardwareEdited = Mapper.MapperToJson(hardwareEdit);
            await hardwareApi.EditHardwareAsync(hardwareEdited);
            NavigationManager.NavigateTo("/hardware");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ocorreu um erro ao tentar salvar o hardware.", Severity.Error);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/hardware");
    }
}
