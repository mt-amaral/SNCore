@page "/hardware/edit/{hardwareId:int}"

@inject HardwareApi hardwareApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<EditForm Model="@hardwareEdit" OnValidSubmit="HandleValidSubmit">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudTextField @bind-Value="hardwareEdit.Description"  Label="Description" Required="true" />
        <MudTextField @bind-Value="hardwareEdit.Model" Label="Model"  Required="true" />
        <MudTextField @bind-Value="hardwareEdit.Ipv4" Label="IPv4"  Required="true"/>

        <MudButton OnClick="HandleValidSubmit" Variant="Variant.Outlined">Salvar</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </MudContainer>
</EditForm>

@code {
    [Parameter] public int hardwareId { get; set; }
    private HardwareResponse hardwareEdit = new HardwareResponse();
    private HardwareRequest hardwareEdited = new HardwareRequest();
    private HardwareValidation validator = new HardwareValidation();

    protected override async Task OnInitializedAsync()
    {
        hardwareEdit = await hardwareApi.GetHardwareId(hardwareId);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var validationResult = validator.Validate(hardwareEdit);
            if (!validationResult.IsValid)
            {
                foreach (var error in validationResult.Errors)
                {
                    Snackbar.Add(error.ErrorMessage, Severity.Error);
                }
                return;
            }
            hardwareEdited = Mapper.MapperToJson(hardwareEdit);
            await hardwareApi.EditHardwareAsync(hardwareEdited);
            NavigationManager.NavigateTo("/hardware");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ocorreu um erro ao tentar salvar o hardware.", Severity.Error);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/hardware");
    }
}
