@page "/hardware"
@using System.Net.Http.Json
@using Admin.App.Componentes.Hardware
@inject HardwareApi hardwareApi
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudDataGrid T="HardwareResponse" Items="@hardwareList" LoadingProgressColor="Color.Dark" Loading="@loading"
                 Striped="true" Dense="true">
        <ToolBarContent>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Add"></MudIconButton>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Sync" OnClick="@OnInitializedAsync"></MudIconButton>
            <MudSpacer />
            <MudChipSet @bind-SelectedChips="selected" MultiSelection="true" Filter="true">
                <MudChip Text="All Offline"></MudChip>
                <MudChip Text="Last Date"></MudChip>
            </MudChipSet>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.FilterAltOff" OnClick="@clearFilter"></MudIconButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Description" Title="Description" />
            <PropertyColumn Property="x => x.Model" Title="Model" />
            <PropertyColumn Property="x => x.Ipv4" Title="IPv4" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                    <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => ShowDeleteConfirmation(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="HardwareResponse" DisableRowsPerPage="true" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    MudChip[] selected;
    private bool loading;
    private IEnumerable<HardwareResponse> hardwareList = new List<HardwareResponse>();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        hardwareList = Array.Empty<HardwareResponse>();
        try
        {
            hardwareList = await hardwareApi.GetHardwaresAsync();
            loading = false;
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    protected void clearFilter()
    {
        selected = Array.Empty<MudChip>();
    }
    async Task ShowCreateConfirmation(HardwareResponse item)
    {
        var parameters = new DialogParameters
        {
            { "hardware", item }
        };
        var dialog = DialogService.Show<CreateHardware>("Create Hardware", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await CreateItem(item);

        }
    }
    async Task CreateItem(HardwareResponse item)
    {
        try
        {

            await hardwareApi.CreateHardwareAsync();
            Snackbar.Add($"Hardware {item.Id} Deleted!", Severity.Normal);
            hardwareList = await hardwareApi.GetHardwaresAsync();

        }
        catch
        {

        }
    }

    async Task ShowDeleteConfirmation(HardwareResponse item)
    {
        var parameters = new DialogParameters
        {
            { "hardware", item }
        };

        var dialog = DialogService.Show<DeleteHardware>("Delete Hardware?", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteItem(item);
            
        }
    }

    async Task DeleteItem(HardwareResponse item)
    {
        try
        {
            await hardwareApi.DeleteHardwareAsync(item.Id);
            Snackbar.Add($"Hardware {item.Id} Deleted!", Severity.Normal);
            hardwareList = await hardwareApi.GetHardwaresAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Esse fela{item.Id}, {item.Model}", Severity.Info);
            Snackbar.Add($"{ex}", Severity.Error);
        }
    }
}
