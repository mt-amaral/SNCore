@page "/hardware"
@using System.Net.Http.Json
@inject HardwareApi hardwareApi

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudDataGrid T="HardwareResponse" Items="@hardwareList" LoadingProgressColor="Color.Dark" Loading="@loading"
                    Striped="true" Dense="true" >
        <ToolBarContent>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Add"></MudIconButton>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Sync" OnClick="@OnInitializedAsync"></MudIconButton>
            <MudSpacer />
            <MudChipSet @bind-SelectedChips="selected" MultiSelection="true" Filter="true">
                <MudChip Text="All Offline" ></MudChip>
                <MudChip Text="Last Date"></MudChip>
            </MudChipSet>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.FilterAltOff" OnClick="@chearFilter" ></MudIconButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" Hidden="true" />
            <PropertyColumn Property="x => x.Description" Title="Description" />
            <PropertyColumn Property="x => x.Model" Title="Model" />
            <PropertyColumn Property="x => x.Ipv4" Title="IPv4" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                    <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteItem(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="HardwareResponse" DisableRowsPerPage="true" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>



@code {
    MudChip[] selected;
    private bool loading;
    private IEnumerable<HardwareResponse> hardwareList = new List<HardwareResponse>();

    protected void chearFilter()
    {
        selected = [];
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        hardwareList = Array.Empty<HardwareResponse>();
        try
        {
            hardwareList = await  hardwareApi.GetHardwaresAsync();
            loading = false;
        }
        catch (Exception ex)
        {
            ;
        }
    }

    // events
    void StartedEditingItem(HardwareResponse item)
    {
    }

    void CanceledEditingItem(HardwareResponse item)
    {
    }

    void CommittedItemChanges(HardwareResponse item)
    {
    }

    void DeleteItem(HardwareResponse item)
    {
    }
}
