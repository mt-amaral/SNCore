@page "/hardware"
@using System.Net.Http.Json
@inject HardwareApi hardwareApi

<MudText Align="Align.Center" Typo="Typo.h4" >HARDWARE</MudText>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" >

@if (!hardwareList.Any())
{
    <MudProgressLinear Indeterminate="true" Class="my-7"/>
}
else
{
        <MudTable Items="@hardwareList" MultiSelection="true" T="HardwareResponse" SelectedItemsChanged="OnSelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Periodic Elements</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>id</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Model</MudTh>
            <MudTh>Ipv4</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="id">@context.Id</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Model">@context.Model</MudTd>
            <MudTd DataLabel="Ipv4">@context.Ipv4</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
        </MudTable>
}

</MudContainer>

@code {
    private IEnumerable<HardwareResponse> hardwareList = new List<HardwareResponse>();
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hardwareList = await hardwareApi.GetHardwaresAsync();
        }
        catch (Exception ex)
        {
            hardwareList = Array.Empty<HardwareResponse>();
        }
    }
    private void OnSelectedItemsChanged(HashSet<HardwareResponse> elements)
    {
        ;
    }
}
