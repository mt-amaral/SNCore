@page "/host"
@using System.Net.Http.Json
@using Admin.App.Componentes.Host
@inject HostApi hostApi
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudDataGrid T="HostResponse" Items="@hostList" LoadingProgressColor="Color.Dark" Loading="@loading"
                 Striped="true" Dense="true">
        <ToolBarContent>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Add" OnClick="@CreateHost"></MudIconButton>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Sync" OnClick="@OnInitializedAsync"></MudIconButton>
            <MudSpacer />
            <MudChipSet @bind-SelectedChips="selected" MultiSelection="true" Filter="true">
                <MudChip Text="All Offline"></MudChip>
                <MudChip Text="Last Date"></MudChip>
            </MudChipSet>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.FilterAltOff" OnClick="@clearFilter"></MudIconButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" Sortable="false" />
            <TemplateColumn Title="Status" ShowColumnOptions="false" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@(context.Item.IsOnline ? Icons.Material.Filled.Link: Icons.Material.Filled.LinkOff)" Color="@(context.Item.IsOnline ? Color.Tertiary: Color.Default)" Title="Link On"></MudIconButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="false" />
            <PropertyColumn Property="x => x.Description" Title="Description" Sortable="false" />
            <PropertyColumn Property="x => x.Model" Title="Model" Sortable="false" />
            <PropertyColumn Property="x => x.Ipv4" Title="IPv4" Sortable="false" />
            <TemplateColumn CellClass="d-flex justify-end" ShowColumnOptions="false" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => ToEdit(context.Item))" />
                    <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => ShowDeleteConfirmation(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="HostResponse" DisableRowsPerPage="true" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    MudChip[] selected;
    private bool loading;
    private IEnumerable<HostResponse> hostList = new List<HostResponse>();
    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        hostList = Array.Empty<HostResponse>();
        try
        {
            hostList = await hostApi.GetHostsAsync();
            loading = false;
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    protected void clearFilter()
    {
        selected = Array.Empty<MudChip>();
    }
    async Task CreateHost()
    {

        var parameters = new DialogParameters
        {
            { "hostNew", new HostRequest() }
        };
        var dialog = DialogService.Show<CreateHost>("Create Host", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var newHost = (HostRequest)result.Data;
                await hostApi.CreateHostAsync(newHost);
                Snackbar.Add($"Created {newHost.Name}", Severity.Success);
                hostList = await hostApi.GetHostsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro Host listing error", Severity.Error);
            }
        }
    }

    private async Task ToEdit(HostResponse host)
    {
        var parameters = new DialogParameters
        {
            { "hostEdit", host }
        };

        var dialog = DialogService.Show<EditHost>("Edit Host", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var editHost = (HostRequest)result.Data;
                await hostApi.EditHostAsync(host.Id, editHost);
                Snackbar.Add($"Host '{editHost.Name}' editado com sucesso!", Severity.Success);
                hostList = await hostApi.GetHostsAsync();

            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro Host listing error {ex}", Severity.Error);
            }
        }
    }


    async Task ShowDeleteConfirmation(HostResponse item)
    {
        var parameters = new DialogParameters
        {
            { "host", item }
        };

        var dialog = DialogService.Show<DeleteHost>("Delete Host?", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteItem(item);
        }
    }
    async Task DeleteItem(HostResponse item)
    {
        try
        {
            await hostApi.DeleteHostAsync(item.Id);
            Snackbar.Add($"Host {item.Id} Deleted!", Severity.Info);
            hostList = await hostApi.GetHostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro {item.Id}, {item.Model}", Severity.Info);
            Snackbar.Add($"{ex}", Severity.Error);
        }
    }
}
