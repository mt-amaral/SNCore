@page "/host"
@using System.Net.Http.Json
@using Admin.App.Componentes.Host
@using Admin.App.Components
@inject HostApi hostApi
@inject HostModelApi hostModelApi
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 10px">
    <MudGrid max>
        <MudItem xs="3" >
            <MudPaper Class="py-8" Elevation="1"></MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="d-flex mud-width-full py-8" Elevation="1"></MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="d-flex mud-width-full py-8" Elevation="1"></MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="d-flex mud-width-full py-8" Elevation="1"></MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
<MudContainer MaxWidth="MaxWidth.ExtraLarge"  Style="margin-top: 10px">
    <MudDataGrid T="HostResponse" Items="@hostList" LoadingProgressColor="Color.Dark" Loading="@loading"
                 Striped="true" Dense="true" GroupExpanded="true" Filterable="false">
        <ToolBarContent>
            <MudSpacer />
            <MudButtonGroup Color="Color.Dark" Variant="Variant.Outlined" Size="Size.Small">
                <MudButton Size="@Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" OnClick="@CreateHost">New Host</MudButton>
                <MudButton Size="@Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.AutoAwesomeMotion">New Group</MudButton>
                <MudButton Size="@Size.Small" StartIcon="@Icons.Material.Filled.Sync" OnClick="@OnInitializedAsync">Reload</MudButton>
            </MudButtonGroup>

        </ToolBarContent>
        <Columns >
            <PropertyColumn Property="x => x.Id"  Sortable="false"  Title="Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Name"  Sortable="false" Title="Name" />
            <TemplateColumn Title="Status" ShowColumnOptions="false" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@(context.Item.IsOnline ? Icons.Material.Filled.Link: Icons.Material.Filled.LinkOff)" Color="@(context.Item.IsOnline ? Color.Tertiary: Color.Default)" Title="Link On"></MudIconButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Description" Sortable="false" Title="Description" />
            <PropertyColumn Property="x => x.Ipv4" Sortable="false" Title="IPv4" />
            <PropertyColumn Property="x => x.GroupId" Sortable="false" Title="Group" Groupable="true" Grouping GroupBy="@_groupBy"  Hidden="true"/>
            <TemplateColumn CellClass="d-flex justify-end" Sortable="false" ShowColumnOptions="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => ToEdit(context.Item))" />
                    <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => ShowDeleteConfirmation(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="HostResponse" DisableRowsPerPage="true" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private bool loading;
    private IEnumerable<HostResponse> hostList = new List<HostResponse>();
    private IEnumerable<ItemByModelResponse> ModelList = new List<ItemByModelResponse>();
    private bool _customizeGroupTemplate;
    static bool _customizeGroupBy;


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        hostList = Array.Empty<HostResponse>();
        try
        {
            hostList = await hostApi.GetHostsAsync();
            ModelList = await hostModelApi.GetModelGroupAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar hosts: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }


    async Task CreateHost()
    {
        var parameters = new DialogParameters
        {
            { "hostNew", new HostRequest() }
        };
        var dialog = DialogService.Show<CreateHost>("Create Host", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var newHost = (HostRequest)result.Data;
                await hostApi.CreateHostAsync(newHost);
                Snackbar.Add($"Created {newHost.Name}", Severity.Success);
                hostList = await hostApi.GetHostsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao criar host: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ToEdit(HostResponse host)
    {
        var parameters = new DialogParameters
        {
            { "hostEdit", host }
        };

        var dialog = DialogService.Show<EditHost>("Edit Host", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var editHost = (HostRequest)result.Data;
                await hostApi.EditHostAsync(host.Id, editHost);
                Snackbar.Add($"Host '{editHost.Name}' editado com sucesso!", Severity.Success);
                hostList = await hostApi.GetHostsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao editar host: {ex.Message}", Severity.Error);
            }
        }
    }

    async Task ShowDeleteConfirmation(HostResponse item)
    {
        var parameters = new DialogParameters
        {
            { "host", item }
        };

        var dialog = DialogService.Show<DeleteHost>("Delete Host?", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteItem(item);
        }
    }

    async Task DeleteItem(HostResponse item)
    {
        try
        {
            await hostApi.DeleteHostAsync(item.Id);
            Snackbar.Add($"Host {item.Id} Deleted!", Severity.Info);
            hostList = await hostApi.GetHostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao deletar host {item.Id}: {ex.Message}", Severity.Error);
        }
    }
    private Func<HostResponse, object> _groupBy = x =>
    {
    if (_customizeGroupBy)
        return x.GroupId.HasValue ? (object)x.GroupId.Value : "UnknownGroup";

    return !string.IsNullOrEmpty(x.GroupName) ? (object)x.GroupName : "NoGroup";
    };

    private string GroupClassFunc(GroupDefinition<HostResponse> item)
    {
        return item.Grouping.Key?.ToString() switch
        {
            "NoGroup" => "mud-theme-info",
            _ => string.Empty
        };
    }
}
